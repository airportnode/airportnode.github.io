<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://airportnode.github.io/news/article-92582.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JavaScript函数调用及函数上下文(this)</title>
        <meta name="description" content="JavaScript中函数调用有如下4种方式： 1.作为一个函数直接被调用， func()。 &nbsp; &nbsp;此时，在非严格模式中函数上下文this指向全局window;在严格模式中指向un" />
        <link rel="icon" href="/assets/website/img/airportnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Airport Node免费节点地址中文网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://airportnode.github.io/news/article-92582.htm" />
    <meta property="og:site_name" content="Airport Node免费节点地址中文网" />
    <meta property="og:title" content="JavaScript函数调用及函数上下文(this)" />
    <meta property="og:image" content="https://airportnode.github.io/uploads/20250201/84fedd97f696cf8c3abf2e5da3e592f7.webp" />
        <meta property="og:release_date" content="2025-04-10T08:17:11" />
    <meta property="og:updated_time" content="2025-04-10T08:17:11" />
        <meta property="og:description" content="JavaScript中函数调用有如下4种方式： 1.作为一个函数直接被调用， func()。 &nbsp; &nbsp;此时，在非严格模式中函数上下文this指向全局window;在严格模式中指向un" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="JavaScript函数调用及函数上下文(this)">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <link rel="preconnect" href="https://fonts.googleapis.com/">
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="">

    <link rel="stylesheet" href="/assets/website/css/airportnode/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/css/airportnode/fontawesome.min.css">
    <link rel="stylesheet" href="/assets/website/css/airportnode/fakeLoader.min.css">
    <link rel="stylesheet" href="/assets/website/css/airportnode/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-ZDWP7NM5HQ"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-ZDWP7NM5HQ');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- loading indicator -->
    <div class="fakeLoader"></div>
    <!-- end loading indicator -->
    <!-- navigation bar -->
    <nav class="navbar navbar-expand-md fixed-top">
        <div class="container">
            <a href="/" class="navbar-brand xcblog-blog-logo">
                                <span>Airport Node</span>
                            </a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <i class="fa fa-bars"></i>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav ml-auto">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/client.htm">客户端</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                    </ul>
            </div>
        </div>
    </nav>
    <!-- end navigation bar -->
    <!-- header-title -->
    <div class="header-title">
        <div class="container">
            <h1>JavaScript函数调用及函数上下文(this)</h1>
            <p>
            	<a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
            </p>
        </div>
    </div>
    <!-- end header-title -->
    <!-- offerings -->
    <div class="services section bg-grey">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="Clash Node官网订阅站" data-url="https://clashnode.github.io">
                  				  				  				<div id="content_views" class="htmledit_views"> <p>JavaScript中函数调用有如下4种方式：</p> <p><strong>1.作为一个函数直接被调用， func()。</strong></p> <p>&nbsp; &nbsp;此时，在非严格模式中函数上下文this指向全局window;在严格模式中指向undefined</p> <p><strong>2.作为一个对象的方法调用，obj.func()。</strong></p> <p>&nbsp; 此时，上下文this指向这个调用它的对象obj</p> <p><strong>3.作为构造函数调用new Func()，实例化一个新的对象。</strong></p> <p>&nbsp; 此时，构造函数内部的this指向其实例化的对象。</p> <pre class="has"><code class="language-javascript">function Func(name) {    this.name = name } let obj1 = new Func('zhangshan'); let obj2 = new Func('lisi');  obj1.name  // =&gt; 'zhangshan' obj2.name  // =&gt; 'lisi'</code></pre> <p>&nbsp; <strong>当通过new关键字调用构造函数时会做如下操作：</strong></p> <p>&nbsp; &nbsp; &nbsp; 1).创建一个新的空对象。</p> <p>&nbsp; &nbsp; &nbsp; 2).该对象作为this参数传递给构造函数，从而成为构造函数的函数上下文（构造函数的作用域赋给新对象，因此构造函数中&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 的&nbsp;this指向了这个新对象）。</p> <p>&nbsp; &nbsp; &nbsp; 3).以创建的对象为上下文执行构造函数中的代码（为新对象添加属性）</p> <p>&nbsp; &nbsp; &nbsp; 4).新构造的对象作为new运算符的返回值<br /> &nbsp; &nbsp; &nbsp; &nbsp;<strong>注：</strong><br /> &nbsp; &nbsp; &nbsp; &nbsp; a:如果构造函数返回一个对象，则该对象将作为整个表达式的值返回，&nbsp;而传入构造函数的this将被丢弃。<br /> &nbsp; &nbsp; &nbsp; &nbsp; b.如果构造函数返回的是非对象类型，则忽略返回值，返回新创建的对象。<br /> &nbsp; &nbsp; &nbsp; &nbsp; c.每个函数都有一个原型对象（可以通过函数的prototype属性访问），该原型对象将被自动设置为通过该函数创建对象的原型。函数的原型可以被任意替换，已经构建的实例引用旧的原型,重新定义函数原型对已经构建的实例没有影响。</p> <pre class="has"><code class="language-javascript">//new 操作过程可以用如下代码来表示  let obj = new Object(); Constructor = [].shift.call(arguments); obj.__proto__ = Constructor.prototype; let ret = Contructor.apply(obj, arguments); return typeof ret === 'object' ? ret : obj</code></pre> <pre class="has"><code class="language-javascript">function Func(name) {    this.name = name    return 1 }  let obj = new Func('zhangshan'); obj  // =&gt; 忽略构造函数中返回值1 还是返回对象 { name: 'zhangshan'};  function Func(name) {    this.name = name    return {      name: 'wang2'    } }  let obj2 = new Func('lisi); obj2 // =&gt; { name: 'wang2'} </code></pre> <p>4.通过函数的apply或者call方法——func.apply(obj)或者func.call(obj)。</p> <pre class="has"><code class="language-javascript">let obj1 = {   name: 'zhangshan' } let obj2 = {   name: 'lisi' }  function func(age) {   console.log(`${this.name} age ${age}`) }  func.call(obj1, 22) // =&gt; zhangshan age 22 func.call(obj2, 26) // =&gt; lisi age 26  //call, apply第一个参数是函数的上下文this //如果第一个参数是null，在非严格模式下this指向window, 严格模式下指向null //apply和call的用法是一样的除了call传递的参数必须一个一个列出来，apply是以数组形式传递参数 </code></pre> <p>在JavaScript中this的值会根据函数的调用方式不同而不同，有时候会使程序中this出现与预期不一致的情况。<br /> 决解方式有两种：使用es6的箭头函数 和 通过bind绑定上下文</p> <pre class="has"><code class="language-javascript">function Ninja(){   this.whoAmI = () =&gt; this; } var ninja1 = new Ninja(); var ninja2 = {   whoAmI: ninja1.whoAmI };  ninja1.whoAmI() === ninja1 //true ninja2.whoAmI() === ninja2 //false   //在箭头函数中this等于函数定义时的上下文 //在这个例子中this是指向ninja1 //所以ninja2.whoAmI() 还是指向ninja1  function Ninja(){   this.whoAmI = function(){     return this;   }.bind(this); } var ninja1 = new Ninja(); var ninja2 = {   whoAmI: ninja1.whoAmI };  ninja1.whoAmI() === ninja1  // true ninja2.whoAmI() === ninja2  //false  //在实例化ninja1的时候， ninja1.whoAmI中的this被绑定为ninja1 //所以不管怎样的方式调用ninja1.whoAmI都是指向 ninja1  //注：此例摘录自 《JavaSript忍者秘籍第2版》</code></pre> <pre class="has"><code class="language-javascript">    const obj = {       func1() {         return this === obj       },       func2: () =&gt; this === window     }     console.log(obj.func1()) //true     console.log(obj.func2()) //true </code></pre> <p>&nbsp;</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-91877.htm">宠物寄养条款最新规定（宠物寄养条款最新规定解读）</a></p>
                                        <p>下一个：<a href="/news/article-92583.htm">django.http.request中QueryDict 对象</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-72908.htm" title="【Java分享客栈】一文搞定京东零售开源的AsyncTool，彻底解决异步编排问题">【Java分享客栈】一文搞定京东零售开源的AsyncTool，彻底解决异步编排问题</a></li>
                        <li class="py-2"><a href="/news/article-70292.htm" title="梦到抱别的女人什么意思周公解梦梦见蛇（梦见抱别人女人是什么）">梦到抱别的女人什么意思周公解梦梦见蛇（梦见抱别人女人是什么）</a></li>
                        <li class="py-2"><a href="/news/article-79686.htm" title="jackson   json对象、实体类相互转换">jackson   json对象、实体类相互转换</a></li>
                        <li class="py-2"><a href="/news/article-83874.htm" title="买宠物粮的网址有哪些（宠物粮在哪个网站买）">买宠物粮的网址有哪些（宠物粮在哪个网站买）</a></li>
                        <li class="py-2"><a href="/news/article-86027.htm" title="被宠物猫抓了一下出了点血（被宠物猫抓了一下出了点血几个月了要打针吗）">被宠物猫抓了一下出了点血（被宠物猫抓了一下出了点血几个月了要打针吗）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-27-clash-node.htm" title="3月27日最新Airport Node订阅 | 22.5M/S|2025年Shadowrocket/V2ray/Clash/SSR免费节点地址链接分享">3月27日最新Airport Node订阅 | 22.5M/S|2025年Shadowrocket/V2ray/Clash/SSR免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-28-free-ssr-subscribe.htm" title="3月28日最新Airport Node订阅 | 19.3M/S|2025年V2ray/SSR/Shadowrocket/Clash免费节点地址链接分享">3月28日最新Airport Node订阅 | 19.3M/S|2025年V2ray/SSR/Shadowrocket/Clash免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/news/article-90406.htm" title="基于Spring接口，集成Caffeine+Redis两级缓存">基于Spring接口，集成Caffeine+Redis两级缓存</a></li>
                        <li class="py-2"><a href="/news/article-88933.htm" title="河南省兽用疫苗中心电话查询（郑州兽用疫苗）">河南省兽用疫苗中心电话查询（郑州兽用疫苗）</a></li>
                        <li class="py-2"><a href="/news/article-75597.htm" title="asyncio 异步编程_在线工具">asyncio 异步编程_在线工具</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">36</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">90</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </div>
    <!-- end offerings -->
    
        <!-- bottom footer -->
    <div class="footer-bottom">
        <div class="container">
                                <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
            <p class="text-white-50 f-15 mb-0">
                <a href="/">Airport Node免费节点地址中文网</a> 版权所有 Powered by WordPress
            </p>
        </div>
    </div>
    <!-- end bottom footer -->
    <!-- script -->
    <script data-cfasync="false" src="/assets/website/js/frontend/airportnode/email-decode.min.js"></script>
    <script src="/assets/website/js/frontend/airportnode/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/airportnode/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/airportnode/fakeLoader.min.js"></script>
    <script src="/assets/website/js/frontend/airportnode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
    <!-- end script -->
</body>

</html>