<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://airportnode.github.io/news/article-68964.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>java高级用法之:JNA类型映射应该注意的一些问题</title>
        <meta name="description" content="简介  JNA提供JAVA类型和native类型的映射关系，但是这一种映射关系只是一个大概的映射，我们在实际的应用中还有很多需要注意的事项，本文将会为大家详细讲解在使用类型映射中可能会出现的问题。一起" />
        <link rel="icon" href="/assets/website/img/airportnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Airport Node免费节点地址中文网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://airportnode.github.io/news/article-68964.htm" />
    <meta property="og:site_name" content="Airport Node免费节点地址中文网" />
    <meta property="og:title" content="java高级用法之:JNA类型映射应该注意的一些问题" />
    <meta property="og:image" content="https://airportnode.github.io/uploads/20250201/3fb407dfc9b9362f9e69508ef9aefd85.webp" />
        <meta property="og:release_date" content="2025-03-07T06:35:32" />
    <meta property="og:updated_time" content="2025-03-07T06:35:32" />
        <meta property="og:description" content="简介  JNA提供JAVA类型和native类型的映射关系，但是这一种映射关系只是一个大概的映射，我们在实际的应用中还有很多需要注意的事项，本文将会为大家详细讲解在使用类型映射中可能会出现的问题。一起" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="java高级用法之:JNA类型映射应该注意的一些问题">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <link rel="preconnect" href="https://fonts.googleapis.com/">
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="">

    <link rel="stylesheet" href="/assets/website/css/airportnode/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/css/airportnode/fontawesome.min.css">
    <link rel="stylesheet" href="/assets/website/css/airportnode/fakeLoader.min.css">
    <link rel="stylesheet" href="/assets/website/css/airportnode/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-ZDWP7NM5HQ"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-ZDWP7NM5HQ');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- loading indicator -->
    <div class="fakeLoader"></div>
    <!-- end loading indicator -->
    <!-- navigation bar -->
    <nav class="navbar navbar-expand-md fixed-top">
        <div class="container">
            <a href="/" class="navbar-brand xcblog-blog-logo">
                                <span>Airport Node</span>
                            </a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <i class="fa fa-bars"></i>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav ml-auto">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/client.htm">客户端</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                    </ul>
            </div>
        </div>
    </nav>
    <!-- end navigation bar -->
    <!-- header-title -->
    <div class="header-title">
        <div class="container">
            <h1>java高级用法之:JNA类型映射应该注意的一些问题</h1>
            <p>
            	<a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
            </p>
        </div>
    </div>
    <!-- end header-title -->
    <!-- offerings -->
    <div class="services section bg-grey">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="Clash Node官网订阅站" data-url="https://clashnode.github.io">
                  				  				  				<div class="toc"> <div class="toc-container-header"><span style="font-size: 2em;">简介</span></div> </div> <p>JNA提供JAVA类型和native类型的映射关系，但是这一种映射关系只是一个大概的映射，我们在实际的应用中还有很多需要注意的事项，本文将会为大家详细讲解在使用类型映射中可能会出现的问题。一起来看看吧。</p> </h1> <p>首先是String的映射，JAVA中的String实际上对应的是两种native类型：const char* 和 const wchar_t<em>。默认情况下String会被转换成为char</em> 。</p> <blockquote> <p>char是ANSI类型的数据类型，而wchar_t是Unicode字符的数据类型,也叫做宽字符。</p> </blockquote> <p>如果JAVA的unicode characters要转换成为char数组，那么需要进行一些编码操作，如果设置了jna.encoding，那么就会使用设置好的编码方式来进行编码。默认情况下编码方式是 "UTF8".</p> <p>如果是WString,那么Unicode values可以直接拷贝到WString中，而不需要进行任何编码。</p> <p>先看一个简单的例子:</p> <pre><code> char* returnStringArgument(char *arg) {   return arg; }  wchar_t* returnWStringArgument(wchar_t *arg) {   return arg; }</code></pre> <p>上面的native代码可以映射为：</p> <pre><code>String returnStringArgument(String s); WString returnWStringArgument(WString s);</code></pre> <p>再来看一个不同的例子，假如native方法的定义是这样的：</p> <pre><code>int getString(char* buffer, int bufsize);  int getUnicodeString(wchar_t* buffer, int bufsize);</code></pre> <p>我们定义了两个方法，方法的参数分别是char* 和wchar_t*。</p> <p>接下来看一下怎么在JAVA中定义方法的映射：</p> <pre><code>// Mapping A: int getString(byte[] buf, int bufsize); // Mapping B: int getUnicodeString(char[] buf, int bufsize);</code></pre> <p>下面是具体的使用：</p> <pre><code>byte[] buf = new byte[256]; int len = getString(buf, buf.length); String normalCString = Native.toString(buf); String embeddedNULs = new String(buf, 0, len);</code></pre> <p>可能有同学会问了，既然JAVA中的String可以转换成为char*，为什么这里需要使用byte数组呢？</p> <p>这是因为getString方法需要对传入的char数组中的内容进行修改，但是因为String是不可变的，所以这里是不能直接使用String的，我们需要使用byte数组。</p> <p>接着我们使用Native.toString(byte[]) 将byte数组转换成为JAVA字符串。</p> <p>再看一个返回值的情况：</p> <pre><code>// Example A: Returns a C string directly const char* getString(); // Example B: Returns a wide character C string directly const wchar_t* getString();</code></pre> <p>一般情况下，如果是native方法直接返回string,我们可以使用String进行映射：</p> <pre><code>// Mapping A String getString(); // Mapping B WString getString();</code></pre> <p>如果native code为String分配了内存空间，那么我们最好使用JNA中的Pointer作为返回值，这样我们可以在未来某些时候，释放所占用的空间,如下所示：</p> <pre><code>Pointer getString();</code></pre> </h1> <p>什么时候需要用到Buffers和Memory呢?</p> <p>一般情况下如果是基础数据的数组作为参数传到函数中的话，可以在JAVA中直接使用基础类的数组来替代。但是如果native方法在方法返回之后，还需要访问数组的话（保存了指向数组的指针），这种情况下使用基础类的数组就不太合适了，这种情况下，我们需要用到ByteBuffers或者Memory。</p> <p>我们知道JAVA中的数组是带有长度的，但是对于native方法来说，返回的数组实际上是一个指向数组的指针，我们并不能知道返回数组的长度，所以如果native方法返回的是数组指针的话，JAVA代码中用数组来进行映射就是不合适的。这种情况下，需要用到Pointer.</p> <p>Pointer表示的是一个指针，先看一下Pointer的例子，首先是native代码：</p> <pre><code>void* returnPointerArgument(void *arg) {   return arg; }  void* returnPointerArrayElement(void* args[], int which) {   return args[which]; }</code></pre> <p>接下来是JAVA的映射：</p> <pre><code>Pointer returnPointerArgument(Pointer p);  Pointer returnPointerArrayElement(Pointer[] args, int which);</code></pre> <p>除了基本的Pointer之外，你还可以自定义带类型的Pointer，也就是PointerType. 只需要继承PointerType即可，如下所示：</p> <pre><code>public static class TestPointerType extends PointerType {             public TestPointerType() { }             public TestPointerType(Pointer p) { super(p); }         } TestPointerType returnPointerArrayElement(TestPointerType[] args, int which);</code></pre> <p>再看一下字符串数组：</p> <pre><code>char* returnStringArrayElement(char* args[], int which) {   return args[which]; }  wchar_t* returnWideStringArrayElement(wchar_t* args[], int which) {   return args[which]; }</code></pre> <p>对应的JAVA映射如下：</p> <pre><code>String returnStringArrayElement(String[] args, int which);  WString returnWideStringArrayElement(WString[] args, int which);</code></pre> <p>对应Buffer来说，JAVA NIO中提供了很多类型的buffer，比如ByteBuffer,ShortBuffer,IntBuffer,LongBuffer,FloatBuffer和DoubleBuffer等。这里以ByteBuffer为例，来看一下具体的使用.</p> <p>首先看下native代码：</p> <pre><code>int32_t fillInt8Buffer(int8_t *buf, int len, char value) {   int i;    for (i=0;i &lt; len;i++) {     buf[i] = value;   }   return len; }</code></pre> <p>这里将buff进行填充，很明显后续还需要使用到这个buffer，所以这里使用数组是不合适的，我们可以选择使用ByteBuffer：</p> <pre><code>int fillInt8Buffer(ByteBuffer buf, int len, byte value);</code></pre> <p>然后看下具体怎么使用：</p> <pre><code>TestLibrary lib = Native.load("testlib", TestLibrary.class);          ByteBuffer buf  = ByteBuffer.allocate(1024).order(ByteOrder.nativeOrder());         final byte MAGIC = (byte)0xED;         lib.fillInt8Buffer(buf, 1024, MAGIC);         for (int i=0;i &lt; buf.capacity();i++) {             assertEquals("Bad value at index " + i, MAGIC, buf.get(i));         }</code></pre> </h1> <p>对于native和JAVA本身来说，都是支持可变参数的，我们举个例子，在native方法中：</p> <pre><code>int32_t addVarArgs(const char *fmt, ...) {   va_list ap;   int32_t sum = 0;   va_start(ap, fmt);    while (*fmt) {     switch (*fmt++) {     case 'd':       sum += va_arg(ap, int32_t);       break;     case 'l':       sum += (int) va_arg(ap, int64_t);       break;     case 's': // short (promoted to 'int' when passed through '...')      case 'c': // byte/char (promoted to 'int' when passed through '...')       sum += (int) va_arg(ap, int);       break;     case 'f': // float (promoted to ‘double’ when passed through ‘...’)     case 'g': // double       sum += (int) va_arg(ap, double);       break;     default:       break;     }   }   va_end(ap);   return sum; }</code></pre> <p>对应的JAVA方法映射如下：</p> <pre><code>public int addVarArgs(String fmt, Number... args);</code></pre> <p>相应的调用代码如下：</p> <pre><code>int arg1 = 1; int arg2 = 2; assertEquals("32-bit integer varargs not added correctly", arg1 + arg2,                      lib.addVarArgs("dd", arg1, arg2));</code></pre> </h1> <p>本文介绍了在使用JNA方法映射中应该注意的一些细节和具体的使用问题。</p> <p>本文的代码：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/ddean2009/learn-java-base-9-to-20.git"  target="_blank" rel="nofollow">https://github.com/ddean2009/learn-java-base-9-to-20.git</a></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-68314.htm">野人部落（野人部落2）</a></p>
                                        <p>下一个：<a href="/news/article-68965.htm">太原宠物领养中心在哪（太原宠物领养中心在哪儿）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-56369.htm" title="上海最好宠物医院大众点评（上海有名宠物医院）">上海最好宠物医院大众点评（上海有名宠物医院）</a></li>
                        <li class="py-2"><a href="/news/article-54165.htm" title="动物医院运营与管理pdf 动物医院运营与管理">动物医院运营与管理pdf 动物医院运营与管理</a></li>
                        <li class="py-2"><a href="/news/article-68964.htm" title="java高级用法之:JNA类型映射应该注意的一些问题">java高级用法之:JNA类型映射应该注意的一些问题</a></li>
                        <li class="py-2"><a href="/news/article-62723.htm" title="Ribbon、Hystrix超时问题">Ribbon、Hystrix超时问题</a></li>
                        <li class="py-2"><a href="/news/article-55271.htm" title="vue 实现弹窗关闭后刷新效果_vue.js">vue 实现弹窗关闭后刷新效果_vue.js</a></li>
                        <li class="py-2"><a href="/news/article-58075.htm" title="狗粮算什么类目（狗粮属于饲料类吗）">狗粮算什么类目（狗粮属于饲料类吗）</a></li>
                        <li class="py-2"><a href="/news/article-60936.htm" title="Springboot中整合knife4j接口文档">Springboot中整合knife4j接口文档</a></li>
                        <li class="py-2"><a href="/news/article-52544.htm" title="[ Shell ] 通过 Shell 脚本导出 GDSII/OASIS 文件">[ Shell ] 通过 Shell 脚本导出 GDSII/OASIS 文件</a></li>
                        <li class="py-2"><a href="/news/article-49924.htm" title="动物防疫站可以给猫做绝育吗（动物防疫站可以给宠物看病吗）">动物防疫站可以给猫做绝育吗（动物防疫站可以给宠物看病吗）</a></li>
                        <li class="py-2"><a href="/news/article-67050.htm" title="动物疫苗管理法律法规最新文件是什么意思（动物疫苗政策）">动物疫苗管理法律法规最新文件是什么意思（动物疫苗政策）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">27</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </div>
    <!-- end offerings -->
    
        <!-- bottom footer -->
    <div class="footer-bottom">
        <div class="container">
            <p>
                <a href="/">首页</a> |
                <a href="/free-node/">免费节点</a> |
                <a href="/news/">新闻资讯</a> |
                <a href="/about-us.htm">关于我们</a> |
                <a href="/disclaimer.htm">免责申明</a> |
                <a href="/privacy.htm">隐私申明</a> |
                <a href="/sitemap.xml">网站地图</a>
            </p>
            <p class="text-white-50 f-15 mb-0">
                <a href="/">Airport Node免费节点地址中文网</a> 版权所有 Powered by WordPress
            </p>
        </div>
    </div>
    <!-- end bottom footer -->
    <!-- script -->
    <script data-cfasync="false" src="/assets/website/js/frontend/airportnode/email-decode.min.js"></script>
    <script src="/assets/website/js/frontend/airportnode/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/airportnode/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/airportnode/fakeLoader.min.js"></script>
    <script src="/assets/website/js/frontend/airportnode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
    <!-- end script -->
</body>

</html>