<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://airportnode.github.io/news/article-75597.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>asyncio 异步编程_在线工具</title>
        <meta name="description" content="首先了解一下协程，协程的本质就是一条线程，多个任务在一条线程上来回切换，协程的所有切换都是基于用户，只有在用户级别才能感知到的 IO 才会用协程模块来规避，在 python 中主要使用的协程模块是 a" />
        <link rel="icon" href="/assets/website/img/airportnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Airport Node免费节点地址中文网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://airportnode.github.io/news/article-75597.htm" />
    <meta property="og:site_name" content="Airport Node免费节点地址中文网" />
    <meta property="og:title" content="asyncio 异步编程_在线工具" />
    <meta property="og:image" content="https://airportnode.github.io/uploads/20250201/40a4cb918c3982faa9bd730bddb62352.webp" />
        <meta property="og:release_date" content="2025-03-17T09:40:19" />
    <meta property="og:updated_time" content="2025-03-17T09:40:19" />
        <meta property="og:description" content="首先了解一下协程，协程的本质就是一条线程，多个任务在一条线程上来回切换，协程的所有切换都是基于用户，只有在用户级别才能感知到的 IO 才会用协程模块来规避，在 python 中主要使用的协程模块是 a" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="asyncio 异步编程_在线工具">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <link rel="preconnect" href="https://fonts.googleapis.com/">
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="">

    <link rel="stylesheet" href="/assets/website/css/airportnode/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/css/airportnode/fontawesome.min.css">
    <link rel="stylesheet" href="/assets/website/css/airportnode/fakeLoader.min.css">
    <link rel="stylesheet" href="/assets/website/css/airportnode/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-ZDWP7NM5HQ"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-ZDWP7NM5HQ');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- loading indicator -->
    <div class="fakeLoader"></div>
    <!-- end loading indicator -->
    <!-- navigation bar -->
    <nav class="navbar navbar-expand-md fixed-top">
        <div class="container">
            <a href="/" class="navbar-brand xcblog-blog-logo">
                                <span>Airport Node</span>
                            </a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <i class="fa fa-bars"></i>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav ml-auto">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/client.htm">客户端</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                    </ul>
            </div>
        </div>
    </nav>
    <!-- end navigation bar -->
    <!-- header-title -->
    <div class="header-title">
        <div class="container">
            <h1>asyncio 异步编程_在线工具</h1>
            <p>
            	<a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
            </p>
        </div>
    </div>
    <!-- end header-title -->
    <!-- offerings -->
    <div class="services section bg-grey">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="Clash Node官网订阅站" data-url="https://clashnode.github.io">
                  				  				  				<p>首先了解一下协程，协程的本质就是一条线程，多个任务在一条线程上来回切换，协程的所有切换都是基于用户，只有在用户级别才能感知到的 IO 才会用协程模块来规避，在 python 中主要使用的协程模块是 asyncio，并且基于 async 和 await 关键字的协程可以实现异步编程，这也是目前 python 异步相关的主流技术。</p> </h1> <p>事件循环它其实是异步编程中的一个非常重要的环节，可以把它当成一个死循环，它会去检查并执行一些代码。</p> <p><strong>示例：</strong>伪代码</p> <pre><code>任务列表 = [ 任务1, 任务2, 任务3,... ]  while True:     可执行的任务列表，已完成的任务列表 = 去任务列表中检查所有的任务，将'可执行'和'已完成'的任务返回          for 就绪任务 in 已准备就绪的任务列表:         执行已就绪的任务          for 已完成的任务 in 已完成的任务列表:         在任务列表中移除 已完成的任务          如果 任务列表 中的任务都已完成，则终止循环 </code></pre> <blockquote> <p>通过上述伪代码就会发现这个事件循环就是可以理解成一个死循环在检查一个列表里的任务，如果列表里面的任务是可执行的，那就去执行这个任务，如果是不可执行（指的是遇到 IO 操作）的，那么在检查的时候就根本检查不到，相当于把 这个任务忽略掉，认为它不需要被执行，让它一直在等待着 IO 请求，当 IO 完成之后在去执行这个任务。</p> </blockquote> <p>获取和创建事件循环</p> <pre><code class="language-python">import asyncio  # 生成和获取一个事件循环 loop = asyncio.get_event_loop()  # 给事件循环添加任务，让事件循环去检测这个任务的状态是否可运行 loop.run_until_complete(任务) </code></pre> </h1> <p>async 是一个关键字，用于定义一个协程函数。</p> <p>协程函数：定义函数的时候使用 <code>async def 函数名</code>。</p> <p>协程对象：执行 <code>协程函数()</code> 得到的协程对象。</p> <pre><code class="language-python"># 定义一个协程函数 async def func():     pass  # 调用协程函数，返回一个协程对象 result = func() </code></pre> <p>调用协程函数的时候，函数内部的代码不会执行，只会返回一个协程对象。</p> <p>如果想要运行协程函数内部代码，必须要将协程对象交给事件循环来处理。</p> <pre><code class="language-python">import asyncio  async def func():     print('这是一个协程函数！')           result = func  # 方式一： loop = asyncio.get_event_loop()   # 生成一个事件循环 loop.run_until_complete( result ) # 将协程对象添加到事件循环执行   # 方式二：python 3.7 之后使用，本质上还是和上面一样，但是比较简单 asyncio.run( result ) </code></pre> </h1> <p>await 也是一个关键字，它主要是在当前任务1遇到 IO 操作的时候切到其他没有 IO 操作的任务2去执行，让事件循环可以去执行其他任务，当任务1的 IO 操作执行完后再切换回来执行 await 之后的内容。</p> <p>await 的后面只能加可等待的对象（协程对象、Task对象 ....）</p> <p><strong>示例：</strong></p> <pre><code class="language-python">import asyncio   async def others():     print('others -----&gt; start')     await asyncio.sleep(2)     print('others -----&gt; end')     return '返回值'   async def fun():     print('执行协程函数内部代码！')          # 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程（任务）。     response = await others()	# 它会等有返回值了才会继续往下执行     print('IO请求结束，结果为：', response)  asyncio.run(fun())   # 输出： 执行协程函数内部代码！ others -----&gt; start others -----&gt; end IO请求结束，结果为： 返回值 </code></pre> <blockquote> <p>从上面这个示例可以看出来 await 就是等待对应后面的值得到结果之后，在向下继续执行！</p> <p>由于在这个示例中事件循环列表中只有一个任务，所以在 IO 等待时无法演示切换到其他任务的执行效果，在程序中如果想要创建多个任务对象，需要使用 Task 对象来实现。</p> </blockquote> </h1> <p>Task 用于并发调度协程，在事件循环中添加多个任务。</p> <p>本质上是将协程对象封装成 Task 对象，并将该协程加入事件循环，同时追踪协程的状态。</p> <p><strong>示例1：</strong>通过<code>asyncio.create_task(协程对象)</code>添加任务。</p> <pre><code class="language-python">import asyncio   async def func(i):     print(i, '---&gt;start')     await asyncio.sleep(1)     print(i, '---&gt;end')     return f'返回值{i}'   async def main():     print('main start')      # 创建 Task 对象并添加到事件循环中     task1 = asyncio.create_task(func(1))     task2 = asyncio.create_task(func(2))      print('main end') 	     # 此处await会自动切换执行其他任务。例如：task1，task2     ret1 = await task1     ret2 = await task2     print(ret1, ret2)  asyncio.run(main())  # 输出： main start main end 1 ---&gt;start 2 ---&gt;start 1 ---&gt;end 2 ---&gt;end 返回值1 返回值2 </code></pre> <p><strong>示例2：</strong>通过<code>asyncio.wait(协程对象列表)</code>添加任务，在它的源码中会通过 <code>ensure_future</code> 把每个协程封装成 Task 对象。</p> <pre><code class="language-python">import asyncio   async def func(i):     print(i, '---&gt;start')     await asyncio.sleep(1)  # 当遇到IO操作挂起当前协程并切换其他协程     print(i, '---&gt;end')     return f'返回值{i}'   task_list = [func(1), func(2)]  # 如果设置了 timeout 值，则意味着此处最多等待的秒，完成的协程返回值写入done中，未完成的写入pending done, pending = asyncio.run(asyncio.wait(task_list, timeout=None))   # 输出： 1 ---&gt;start 2 ---&gt;start 1 ---&gt;end 2 ---&gt;end </code></pre> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-74930.htm">兽药厂排行榜前三十名（兽药厂排行榜前三十名企业）</a></p>
                                        <p>下一个：<a href="/news/article-75598.htm">天津宠物救助中心 天津宠物救助中心电话</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-76269.htm" title="动物疫苗是疫苗吗还是疫苗呢 动物疫苗是疫苗吗还是疫苗呢图片">动物疫苗是疫苗吗还是疫苗呢 动物疫苗是疫苗吗还是疫苗呢图片</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-8-free-node-subscribe.htm" title="3月8日最新Airport Node订阅 | 22.2M/S|2025年Clash/Shadowrocket/V2ray/SSR免费节点地址链接分享">3月8日最新Airport Node订阅 | 22.2M/S|2025年Clash/Shadowrocket/V2ray/SSR免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/news/article-49685.htm" title="将时间戳值增加微秒以将其转换为整数，MySQL将返回什么？">将时间戳值增加微秒以将其转换为整数，MySQL将返回什么？</a></li>
                        <li class="py-2"><a href="/news/article-51516.htm" title="附近领养狗狗的地方 附近领养狗狗的地方在哪里">附近领养狗狗的地方 附近领养狗狗的地方在哪里</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-10-free-subscribe-node.htm" title="2月10日最新Airport Node订阅 | 18.3M/S|2025年Shadowrocket/Clash/V2ray/SSR免费节点地址链接分享">2月10日最新Airport Node订阅 | 18.3M/S|2025年Shadowrocket/Clash/V2ray/SSR免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/news/article-54166.htm" title="被猫咬出血了需要打几针（被猫咬出血了需要打几针疫苗）">被猫咬出血了需要打几针（被猫咬出血了需要打几针疫苗）</a></li>
                        <li class="py-2"><a href="/news/article-56369.htm" title="上海最好宠物医院大众点评（上海有名宠物医院）">上海最好宠物医院大众点评（上海有名宠物医院）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-16-clash-node.htm" title="3月16日最新Airport Node订阅 | 21M/S|2025年V2ray/Clash/SSR/Shadowrocket免费节点地址链接分享">3月16日最新Airport Node订阅 | 21M/S|2025年V2ray/Clash/SSR/Shadowrocket免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/news/article-60363.htm" title="shiro550反序列学习">shiro550反序列学习</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-1-clash-v2ray-ss-ssr.htm" title="3月1日最新Airport Node订阅 | 21.3M/S|2025年SSR/V2ray/Clash/Shadowrocket免费节点地址链接分享">3月1日最新Airport Node订阅 | 21.3M/S|2025年SSR/V2ray/Clash/Shadowrocket免费节点地址链接分享</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">57</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </div>
    <!-- end offerings -->
    
        <!-- bottom footer -->
    <div class="footer-bottom">
        <div class="container">
            <p>
                <a href="/">首页</a> |
                <a href="/free-node/">免费节点</a> |
                <a href="/news/">新闻资讯</a> |
                <a href="/about-us.htm">关于我们</a> |
                <a href="/disclaimer.htm">免责申明</a> |
                <a href="/privacy.htm">隐私申明</a> |
                <a href="/sitemap.xml">网站地图</a>
            </p>
            <p class="text-white-50 f-15 mb-0">
                <a href="/">Airport Node免费节点地址中文网</a> 版权所有 Powered by WordPress
            </p>
        </div>
    </div>
    <!-- end bottom footer -->
    <!-- script -->
    <script data-cfasync="false" src="/assets/website/js/frontend/airportnode/email-decode.min.js"></script>
    <script src="/assets/website/js/frontend/airportnode/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/airportnode/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/airportnode/fakeLoader.min.js"></script>
    <script src="/assets/website/js/frontend/airportnode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
    <!-- end script -->
</body>

</html>